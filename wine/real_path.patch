From 5613b9eb0ab964350f42f5d5e1badd910c9188e3 Mon Sep 17 00:00:00 2001
From: Vingian <89702391+Vingian@users.noreply.github.com>
Date: Sun, 29 Jun 2025 15:46:17 -0300
Subject: [PATCH] Real Path

Some versions of EAC expect the real path in Z: to check integrity and stuff.
---
 dlls/ntdll/unix/env.c          | 36 ++++++++++++++++++++++++++++++++--
 dlls/ntdll/unix/process.c      |  2 +-
 dlls/ntdll/unix/unix_private.h |  2 +-
 3 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/env.c b/dlls/ntdll/unix/env.c
index 9edb69dd519..d1eb082078a 100644
--- a/dlls/ntdll/unix/env.c
+++ b/dlls/ntdll/unix/env.c
@@ -2190,17 +2190,46 @@ static BOOL is_console_handle( HANDLE handle )
                                   &mode, sizeof(mode) ) == STATUS_SUCCESS;
 }
 
+UNICODE_STRING real_path( const char *unix_image )
+{
+    UNICODE_STRING ret = {0};
+    char *unix_path, *real_path;
+    unsigned int path_len;
+    WCHAR *nt_path, Z[] = {'\\','?','?','\\','Z',':'};
+
+    if ((real_path = realpath( unix_image, NULL )))
+    {
+        for (unix_path = real_path; *unix_path; *unix_path = *unix_path == '/' ? '\\' : *unix_path, unix_path++);
+        path_len = unix_path - real_path;
+        if ((nt_path = malloc( (path_len + ARRAY_SIZE(Z) + 1) * sizeof(WCHAR) )))
+        {
+            path_len = ntdll_umbstowcs( real_path, path_len, nt_path + ARRAY_SIZE(Z), path_len ) + ARRAY_SIZE(Z);
+            memcpy(nt_path, Z, sizeof(Z));
+            nt_path[path_len] = 0;
+
+            init_unicode_string( &ret, nt_path );
+        }
+        free( real_path );
+    }
+
+    return ret;
+}
+
 /***********************************************************************
  *           create_startup_info
  */
-void *create_startup_info( const UNICODE_STRING *nt_image, ULONG process_flags,
+void *create_startup_info( const UNICODE_STRING *nt_image, const char *unix_image, ULONG process_flags,
                            const RTL_USER_PROCESS_PARAMETERS *params,
                            const struct pe_image_info *pe_info, DWORD *info_size )
 {
     struct startup_info_data *info;
+    UNICODE_STRING real_image;
     DWORD size;
     void *ptr;
 
+    real_image = real_path( unix_image );
+    if (real_image.Buffer) nt_image = &real_image;
+
     size = sizeof(*info);
     size += params->CurrentDirectory.DosPath.Length;
     size += params->DllPath.Length;
@@ -2213,7 +2242,7 @@ void *create_startup_info( const UNICODE_STRING *nt_image, ULONG process_flags,
     size = (size + 1) & ~1;
     *info_size = size;
 
-    if (!(info = calloc( size, 1 ))) return NULL;
+    if (!(info = calloc( size, 1 ))) goto done;
 
     info->debug_flags   = params->DebugFlags;
     info->console_flags = params->ConsoleFlags;
@@ -2249,6 +2278,9 @@ void *create_startup_info( const UNICODE_STRING *nt_image, ULONG process_flags,
     info->desktop_len = append_string( &ptr, params, &params->Desktop );
     info->shellinfo_len = append_string( &ptr, params, &params->ShellInfo );
     info->runtime_len = append_string( &ptr, params, &params->RuntimeInfo );
+
+done:
+    free( real_image.Buffer );
     return info;
 }
 
diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
index 727b6dd9380..37410e6e8b3 100644
--- a/dlls/ntdll/unix/process.c
+++ b/dlls/ntdll/unix/process.c
@@ -794,7 +794,7 @@ NTSTATUS WINAPI NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_
         if (is_arm64ec() && pe_info.is_hybrid && machine == IMAGE_FILE_MACHINE_ARM64)
             machine = main_image_info.Machine;
     }
-    if (!(startup_info = create_startup_info( attr.ObjectName, process_flags, params, &pe_info, &startup_info_size )))
+    if (!(startup_info = create_startup_info( attr.ObjectName, unix_name, process_flags, params, &pe_info, &startup_info_size )))
         goto done;
     env_size = get_env_size( params, &winedebug );
 
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index a735e54d9ff..1ebc55612d3 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -206,7 +206,7 @@ extern struct ldt_copy __wine_ldt_copy;
 
 extern void init_environment(void);
 extern void init_startup_info(void);
-extern void *create_startup_info( const UNICODE_STRING *nt_image, ULONG process_flags,
+extern void *create_startup_info( const UNICODE_STRING *nt_image, const char *unix_image, ULONG process_flags,
                                   const RTL_USER_PROCESS_PARAMETERS *params,
                                   const struct pe_image_info *pe_info, DWORD *info_size );
 extern char **build_envp( const WCHAR *envW );
